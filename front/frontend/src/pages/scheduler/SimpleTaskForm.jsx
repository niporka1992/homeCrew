import {
    Form,
    Input,
    DatePicker,
    Button,
    Select,
    Row,
    Col,
    Card,
    InputNumber,
    TimePicker,
    Alert,
    message,
} from 'antd'
import dayjs from 'dayjs'
import { useState } from 'react'
import { api } from '../../api/api.js'

export default function SimpleTaskForm({ onSuccess }) {
    const [form] = Form.useForm()
    const [unit, setUnit] = useState('seconds')
    const [showInterval, setShowInterval] = useState(false)
    const [timeError, setTimeError] = useState(null)
    const [loading, setLoading] = useState(false)

    // üîπ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è "–∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤"
    const handleRepeatChange = (value) => {
        const count = Number(value) || 0
        setShowInterval(count > 0)
        if (count <= 0) form.setFieldValue('repeatInterval', null)
    }

    // üîπ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
    const validateStartDateTime = (values) => {
        if (!values.startDate || !values.time) return false
        const datePart = dayjs(values.startDate).format('YYYY-MM-DD')
        const timePart = dayjs(values.time).format('HH:mm')
        const startDateTime = dayjs(`${datePart} ${timePart}`, 'YYYY-MM-DD HH:mm')
        return startDateTime.isBefore(dayjs())
    }

    // üîπ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–±–º–∏—Ç–∞
    const handleSubmit = async (values) => {
        setTimeError(null)
        setLoading(true)

        // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º +1 –º–∏–Ω—É—Ç—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const now = dayjs()
        if (values.time && values.time.isSame(now, 'minute')) {
            values.time = now.add(1, 'minute')
        }

        if (validateStartDateTime(values)) {
            setTimeError('–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º')
            setLoading(false)
            return
        }

        try {
            const unitToMs = {
                seconds: 1000,
                minutes: 60 * 1000,
                hours: 60 * 60 * 1000,
                days: 24 * 60 * 60 * 1000,
            }

            const intervalValue = Number(values.repeatInterval) || 0
            const intervalMs = intervalValue * unitToMs[unit]

            const payload = {
                type: 'SIMPLE',
                jobName: values.jobName.trim(),
                startDate: values.startDate.format('YYYY-MM-DD'),
                time: values.time.format('HH:mm'),
                repeatCount: Number(values.repeatCount) || 0,
                repeatIntervalMs: intervalMs,
            }

            await api.post('/scheduler/job/simple', payload)

            message.success('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
            form.resetFields()
            setShowInterval(false)
            setTimeError(null)
            onSuccess?.()
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err)
            setTimeError(err.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SIMPLE-–∑–∞–¥–∞—á–∏')
        } finally {
            setLoading(false)
        }
    }

    return (
        <Card
            title="–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏"
            style={{
                maxWidth: 420,
                margin: '0 auto',
                borderRadius: 12,
                boxShadow: '0 4px 14px rgba(0,0,0,0.1)',
            }}
        >
            <Form
                layout="vertical"
                form={form}
                onFinish={handleSubmit}
                initialValues={{ repeatCount: 0 }}
            >
                <Form.Item
                    label="–ò–º—è –∑–∞–¥–∞—á–∏"
                    name="jobName"
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–¥–∞—á–∏' }]}
                >
                    <Input placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: simpleTest" />
                </Form.Item>

                <Form.Item
                    label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤"
                    name="repeatCount"
                    tooltip="0 = –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑"
                    rules={[{ type: 'number', min: 0, message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â• 0' }]}
                >
                    <InputNumber
                        min={0}
                        style={{ width: '100%' }}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3"
                        onChange={handleRepeatChange}
                    />
                </Form.Item>

                {showInterval && (
                    <Form.Item label="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏" required>
                        <Row gutter={8}>
                            <Col span={16}>
                                <Form.Item
                                    name="repeatInterval"
                                    noStyle
                                    rules={[
                                        { required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–æ–≤' },
                                        { type: 'number', min: 1, message: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0' },
                                    ]}
                                >
                                    <InputNumber
                                        min={1}
                                        style={{ width: '100%' }}
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
                                    />
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Select value={unit} onChange={setUnit}>
                                    <Select.Option value="seconds">—Å–µ–∫</Select.Option>
                                    <Select.Option value="minutes">–º–∏–Ω</Select.Option>
                                    <Select.Option value="hours">—á–∞—Å—ã</Select.Option>
                                    <Select.Option value="days">–¥–Ω–∏</Select.Option>
                                </Select>
                            </Col>
                        </Row>
                    </Form.Item>
                )}

                <Row gutter={8}>
                    <Col span={12}>
                        <Form.Item
                            label="–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞"
                            name="startDate"
                            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' }]}
                        >
                            <DatePicker style={{ width: '100%' }} format="DD.MM.YYYY" />
                        </Form.Item>
                    </Col>

                    <Col span={12}>
                        <Form.Item
                            label="–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞"
                            name="time"
                            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è' }]}
                        >
                            <TimePicker
                                style={{ width: '100%' }}
                                format="HH:mm"
                                onChange={(value) => {
                                    if (!value) return
                                    const now = dayjs()
                                    // –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ –º–∏–Ω—É—Ç–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º +1 –º–∏–Ω—É—Ç—É
                                    if (value.isSame(now, 'minute')) {
                                        const plusOne = now.add(1, 'minute')
                                        form.setFieldValue('time', plusOne)
                                        message.info('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ +1 –º–∏–Ω—É—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
                                    }
                                }}
                            />
                        </Form.Item>

                    </Col>
                </Row>

                <div style={{ textAlign: 'center', marginTop: 16 }}>
                    <Button type="primary" htmlType="submit" loading={loading}>
                        –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
                    </Button>
                </div>

                {timeError && (
                    <div style={{ marginTop: 16 }}>
                        <Alert
                            message={timeError}
                            type="error"
                            showIcon
                            style={{ textAlign: 'left' }}
                        />
                    </div>
                )}
            </Form>
        </Card>
    )
}
