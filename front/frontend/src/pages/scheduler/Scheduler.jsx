import { useEffect, useState } from 'react'
import {
    Card,
    Typography,
    Table,
    Button,
    Space,
    Modal,
    Select,
    message,
    Tag,
    Tooltip,
} from 'antd'
import {
    PlusOutlined,
    PauseCircleOutlined,
    ReloadOutlined,
    PlayCircleOutlined,
    ThunderboltOutlined,
    ClockCircleOutlined,
} from '@ant-design/icons'
import CronTaskForm from './cron/CronTaskForm.jsx'
import SimpleTaskForm from './SimpleTaskForm'
import dayjs from 'dayjs'
import { api } from '../../api/api.js'

const { Title, Text } = Typography
const { Option } = Select

export default function Scheduler() {
    const [loading, setLoading] = useState(false)
    const [jobs, setJobs] = useState([])
    const [filter, setFilter] = useState('active')
    const [isCronModalOpen, setIsCronModalOpen] = useState(false)
    const [isSimpleModalOpen, setIsSimpleModalOpen] = useState(false)

    // üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
    const loadJobs = async () => {
        setLoading(true)
        try {
            const data = await api.get(`/scheduler/jobs?status=${filter}`)
            setJobs(data)
        } catch {
            message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á')
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        loadJobs()
    }, [filter])

    // üîπ –ü–∞—É–∑–∞ / –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const handleToggleStatus = async (jobName, shouldActivate) => {
        try {
            await api.patch(
                `/scheduler/job/${encodeURIComponent(jobName)}/status?active=${shouldActivate}`
            )

            message.success(
                shouldActivate ? '–ó–∞–¥–∞—á–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ó–∞–¥–∞—á–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
            )

            // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
            loadJobs()
        } catch (err) {
            message.error(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞')
        }
    }


    const columns = [
        {
            title: '–ò–º—è –∑–∞–¥–∞—á–∏',
            dataIndex: 'name',
            key: 'name',
            render: (text) => (
                <Text strong style={{ color: '#69b1ff' }}>
                    {text}
                </Text>
            ),
        },
        {
            title: '–û–ø–∏—Å–∞–Ω–∏–µ',
            dataIndex: 'description',
            key: 'description',
            render: (v) => v || <Text type="secondary">‚Äî</Text>,
        },
        {
            title: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫',
            dataIndex: 'previousFireTime',
            key: 'previousFireTime',
            render: (v) => v ? dayjs(v).format('DD.MM.YYYY HH:mm') : '‚Äî',
        },
        {
            title: '–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫',
            dataIndex: 'nextFireTime',
            key: 'nextFireTime',
            render: (v) => v ? dayjs(v).format('DD.MM.YYYY HH:mm') : '‚Äî',
        },
        {
            title: '–°—Ç–∞—Ç—É—Å',
            dataIndex: 'status',
            key: 'status',
            align: 'center',
            render: (status) => {
                const colorMap = {
                    NORMAL: 'green',
                    PAUSED: 'default',
                    BLOCKED: 'gold',
                    ERROR: 'red',
                    COMPLETE: 'purple',
                    NONE: 'gray',
                }
                const tooltipMap = {
                    NORMAL: '–ê–∫—Ç–∏–≤–Ω–∞',
                    PAUSED: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                    BLOCKED: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                    ERROR: '–û—à–∏–±–∫–∞',
                    COMPLETE: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
                    NONE: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ',
                }
                return (
                    <Tooltip title={tooltipMap[status]}>
                        <Tag color={colorMap[status] || 'default'}>{status}</Tag>
                    </Tooltip>
                )
            },
        },
        {
            title: '–î–µ–π—Å—Ç–≤–∏–µ',
            key: 'action',
            align: 'center',
            render: (_, record) => {
                // –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                if (record.status === 'COMPLETE') {
                    return <Text type="secondary">‚Äî</Text>
                }

                const isActive = record.status === 'NORMAL'
                const shouldActivate = !isActive
                const buttonLabel = shouldActivate ? '–°—Ç–∞—Ä—Ç' : '–ü–∞—É–∑–∞'

                return (
                    <Tooltip title={shouldActivate ? '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å' : '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É'}>
                        <Button
                            icon={
                                shouldActivate ? (
                                    <PlayCircleOutlined style={{ color: '#52c41a' }} />
                                ) : (
                                    <PauseCircleOutlined style={{ color: '#ff4d4f' }} />
                                )
                            }
                            type={shouldActivate ? 'primary' : 'text'}
                            danger={!shouldActivate}
                            onClick={() => handleToggleStatus(record.name, shouldActivate)}
                        >
                            {buttonLabel}
                        </Button>
                    </Tooltip>
                )
            },
        }


    ]

    const handleCreateSuccess = () => {
        setIsCronModalOpen(false)
        setIsSimpleModalOpen(false)
        loadJobs()
    }

    return (
        <Card
            bordered
            style={{
                margin: '1rem auto',
                borderRadius: 16,
                background: '#141414',
                color: '#fff',
                boxShadow: '0 2px 12px rgba(0,0,0,0.4)',
                maxWidth: 1200,
            }}
        >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div
                style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: 16,
                }}
            >
                <Title level={3} style={{ color: '#e6f4ff', margin: 4 }}>
                    üïì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                </Title>

                <Space>
                    <Select
                        value={filter}
                        onChange={(val) => setFilter(val)}
                        style={{ width: 220 }}
                        options={[
                            { value: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–µ' },
                            { value: 'paused', label: '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ' },
                            { value: 'other', label: '–ü—Ä–æ—á–∏–µ' },
                        ]}
                    />
                    <Button
                        icon={<ReloadOutlined />}
                        onClick={loadJobs}
                        loading={loading}
                    />
                    <Button
                        type="default"
                        icon={<ClockCircleOutlined />}
                        onClick={() => setIsSimpleModalOpen(true)}
                    >
                        –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
                    </Button>
                    <Button
                        type="primary"
                        icon={<ThunderboltOutlined />}
                        onClick={() => setIsCronModalOpen(true)}
                    >
                        CRON-–∑–∞–¥–∞—á–∞
                    </Button>
                </Space>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ */}
            <Table
                columns={columns}
                dataSource={jobs}
                rowKey={(r) => r.name}
                loading={loading}
                pagination={{
                    pageSize: 8,
                    position: ['bottomCenter'],
                    showSizeChanger: false,
                }}
                bordered
                size="middle"
                style={{ background: '#1f1f1f', borderRadius: 12 }}
            />

            {/* SIMPLE –º–æ–¥–∞–ª–∫–∞ */}
            <Modal
                title="‚ö° –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞"
                open={isSimpleModalOpen}
                onCancel={() => setIsSimpleModalOpen(false)}
                centered
                width={600}
                footer={null}
                destroyOnClose
            >
                <SimpleTaskForm onSuccess={handleCreateSuccess} />
            </Modal>

            {/* CRON –º–æ–¥–∞–ª–∫–∞ */}
            <Modal
                title="üß≠ CRON-–∑–∞–¥–∞—á–∞"
                open={isCronModalOpen}
                onCancel={() => setIsCronModalOpen(false)}
                centered
                width={600}
                footer={null}
                destroyOnClose
            >
                <CronTaskForm onSuccess={handleCreateSuccess} />
            </Modal>
        </Card>
    )
}
