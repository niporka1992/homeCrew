import io.spring.gradle.dependencymanagement.dsl.DependencyManagementExtension
import name.remal.gradle_plugins.sonarlint.SonarLintExtension

plugins {
    id("org.springframework.boot") version "3.3.3" apply false
    id("io.spring.dependency-management") version "1.1.5" apply false
    id("com.diffplug.spotless") version "6.25.0" apply false
    id("name.remal.sonarlint") version "3.4.3" apply false
    id("org.sonarqube") version "5.0.0.4638" apply false
    id("java")
}

allprojects {
    group = "ru.homecrew"
    version = "1.0.0"

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply(plugin = "java")
    apply(plugin = "io.spring.dependency-management")
    apply(plugin = "name.remal.sonarlint")
    apply(plugin = "com.diffplug.spotless")

    // ‚úÖ Java toolchain 21
    extensions.configure<JavaPluginExtension> {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    // ‚úÖ –û–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (BOM)
    the<DependencyManagementExtension>().apply {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:3.3.3")
        }
        dependencies {
            dependency("org.mapstruct:mapstruct:1.6.2")
            dependency("org.mapstruct:mapstruct-processor:1.6.2")
        }
    }

    dependencies {
        implementation("org.mapstruct:mapstruct")
        annotationProcessor("org.mapstruct:mapstruct-processor")
    }

    // ‚úÖ Spotless (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á–∏—Å—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤)
    configure<com.diffplug.gradle.spotless.SpotlessExtension> {
        java {
            palantirJavaFormat("2.63.0")
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    // ‚úÖ SonarLint –±–µ–∑ —Ç–µ—Å—Ç–æ–≤
    extensions.configure<SonarLintExtension> {
        testSourceSets = emptyList()
        ignoredPaths.addAll(
            listOf(
                "**/src/test/**",
                "**/test/**",
                "**/build/**",
                "**/out/**"
            )
        )
    }

    tasks.configureEach {
        if (name.contains("sonarlintTest", ignoreCase = true)) enabled = false
    }

    // ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤
    tasks.withType<Test> {
        useJUnitPlatform()
        testLogging { showStandardStreams = true }
    }

    //  –û–±—â–∏–π build –ø–æ—Ä—è–¥–æ–∫
    tasks.named("build") {
        dependsOn("clean", "spotlessApply", "test")
    }
}

// ===  Spring Boot fat-jar —Ç–æ–ª—å–∫–æ –¥–ª—è app ===
project(":app") {
    apply(plugin = "org.springframework.boot")

    //  –£–±–∏—Ä–∞–µ–º shadow, –∏—Å–ø–æ–ª—å–∑—É–µ–º bootJar
    tasks.named<org.springframework.boot.gradle.tasks.bundling.BootJar>("bootJar") {
        archiveClassifier.set("") // —Å–æ–∑–¥–∞—ë—Ç app-1.0.0.jar –±–µ–∑ "-plain"
        launchScript() // –¥–µ–ª–∞–µ—Ç jar –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º (bash-—Å–∫—Ä–∏–ø—Ç —Å–≤–µ—Ä—Ö—É)
    }

    tasks.named("build") {
        dependsOn("bootJar")
    }
}


// ===  –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ (clean ‚Üí —Ñ–æ—Ä–º–∞—Ç ‚Üí —Ç–µ—Å—Ç—ã ‚Üí bootJar + –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞) ===
tasks.register("fullBuild") {
    group = "build"
    description = "–û—á–∏—â–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π boot-jar –∏–∑ :app"

    dependsOn(
        ":core:clean",
        ":bot:clean",
        ":app:clean",
        ":core:spotlessApply",
        ":bot:spotlessApply",
        ":app:spotlessApply",
        ":core:test",
        ":bot:test",
        ":app:test"
    )

    doLast {
        var jarFile = file("app/build/libs/app-1.0.0.jar")

        // –µ—Å–ª–∏ JAR –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        if (!jarFile.exists()) {
            println("üîÅ –ó–∞–ø—É—Å–∫–∞—é :app:bootJar –≤—Ä—É—á–Ω—É—é...")
            exec { commandLine("bash", "-c", "./gradlew :app:bootJar") }
            jarFile = file("app/build/libs/app-1.0.0.jar")
        }

        // —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (jarFile.exists()) {
            val sizeMB = String.format("%.2f", jarFile.length() / 1024.0 / 1024.0)
            println("\u001B[32m‚úÖ –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\u001B[0m")
            println("üì¶ Fat-JAR: ${jarFile.absolutePath} (${sizeMB} MB)")
            println("‚ñ∂ –ó–∞–ø—É—Å–∫: java -jar ${jarFile.absolutePath} --spring.profiles.active=dev")
        } else {
            println("\u001B[31m‚ùå –î–∞–∂–µ —Ä—É—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ :app:bootJar –Ω–µ —Å–æ–∑–¥–∞–ª–∞ JAR.\u001B[0m")
        }
    }
}

