package ru.homecrew.mapper;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;
import ru.homecrew.dto.task.TaskCommentDto;
import ru.homecrew.entity.AppUser;
import ru.homecrew.entity.task.TaskComment;
import ru.homecrew.entity.task.TaskHistory;

@DisplayName("üí¨ TaskCommentMapper ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ TaskComment ‚Üí TaskCommentDto")
class TaskCommentMapperTest {

    private final TaskCommentMapper mapper = Mappers.getMapper(TaskCommentMapper.class);

    @Test
    @DisplayName("‚úÖ toDto: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å TaskComment ‚Üí DTO")
    void toDto_shouldMapEntityCorrectly() {
        // given
        var author = AppUser.builder().username("ivan").fullName("–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤").build();

        var history = new TaskHistory();

        var comment = TaskComment.builder()
                .text("–í—Å—ë –≥–æ—Ç–æ–≤–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.")
                .author(author)
                .history(history)
                .build();

        // when
        TaskCommentDto dto = mapper.toDto(comment);

        // then
        assertThat(dto.text()).isEqualTo("–í—Å—ë –≥–æ—Ç–æ–≤–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.");
        assertThat(dto.authorName()).isEqualTo("ivan");
        // createdAt –Ω–µ –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null (–∏–ª–∏ —á–µ—Ä–µ–∑ BaseEntity, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å)
        assertThat(dto.createdAt()).isNull();
    }
}
