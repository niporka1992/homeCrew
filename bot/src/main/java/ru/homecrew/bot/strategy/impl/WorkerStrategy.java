package ru.homecrew.bot.strategy.impl;

import jakarta.annotation.PostConstruct;
import jakarta.persistence.EntityNotFoundException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.homecrew.bot.annotation.RoleMapping;
import ru.homecrew.bot.model.BotContext;
import ru.homecrew.bot.service.UserInputWaiter;
import ru.homecrew.bot.strategy.BotUserStrategy;
import ru.homecrew.bot.util.CallbackFactory;
import ru.homecrew.dto.task.TaskCommentDto;
import ru.homecrew.dto.task.TaskDto;
import ru.homecrew.entity.AppUser;
import ru.homecrew.entity.UserExternalIds;
import ru.homecrew.enums.Role;
import ru.homecrew.enums.TaskActionType;
import ru.homecrew.enums.TaskStatus;
import ru.homecrew.repository.UserExternalIdsRepository;
import ru.homecrew.service.BotMessenger;
import ru.homecrew.service.bot.ui.UiButton;
import ru.homecrew.service.bot.ui.UiKeyboard;
import ru.homecrew.service.bot.ui.UiKeyboardRow;
import ru.homecrew.service.task.TaskAttachmentService;
import ru.homecrew.service.task.TaskCommentService;
import ru.homecrew.service.task.TaskHistoryService;
import ru.homecrew.service.task.TaskService;
import ru.homecrew.util.DateTimeUtils;

@Component
@RoleMapping(Role.WORKER)
@RequiredArgsConstructor
@Slf4j
public class WorkerStrategy implements BotUserStrategy {

    private final BotMessenger messenger;
    private final OkHttpTelegramClient client;
    private final TaskService taskService;
    private final UserExternalIdsRepository externalIdsRepository;
    private final TaskCommentService commentService;
    private final UserInputWaiter inputWaiter;
    private final TaskAttachmentService attachmentService;
    private final TaskHistoryService historyService;

    @Value("${app.telegram.group-chat-id}")
    private Long groupChatId;

    private final Map<String, BiConsumer<String, BotContext>> callbackHandlers = new LinkedHashMap<>();

    @PostConstruct
    private void initHandlers() {
        callbackHandlers.put(CallbackFactory.PREFIX_TASKS_TAKE, this::handleTakeTask);
        callbackHandlers.put(CallbackFactory.PREFIX_TASKS, (data, ctx) -> showMyTasks(ctx));
        callbackHandlers.put(CallbackFactory.PREFIX_TASK_DONE, this::handleTaskDone);
        callbackHandlers.put(CallbackFactory.PREFIX_TASK_COMMENT, this::handleTaskComment);
        callbackHandlers.put(CallbackFactory.PREFIX_TASK_MEDIA, this::handleTaskMedia);
        callbackHandlers.put(CallbackFactory.PREFIX_TASK, this::showTaskDetails);
    }

    // ====================== MENU ======================
    @Override
    public void showMenu(BotContext ctx) {
        UiKeyboard keyboard =
                UiKeyboard.ofRows(UiKeyboardRow.of(new UiButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", CallbackFactory.PREFIX_TASKS)));

        messenger.sendMessageWithKeyboard(
                ctx.getChatId(),
                """
                üë∑ *–ú–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞*
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """,
                keyboard);
    }

    @Override
    public void handleMessage(String text, BotContext ctx) {
        switch (text.toLowerCase()) {
            case "/start", "/menu" -> showMenu(ctx);
            case "/tasks" -> showMyTasks(ctx);
            default -> messenger.sendMessage(ctx.getChatId(), "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π /menu –∏–ª–∏ /tasks");
        }
    }

    // ====================== CALLBACK DISPATCH ======================
    @Override
    public void handleCallback(String data, BotContext ctx) {
        try {
            log.info("üì¶ CALLBACK DATA = '{}'", data);

            for (var entry : callbackHandlers.entrySet()) {
                if (data.startsWith(entry.getKey())) {
                    entry.getValue().accept(data, ctx);
                    return;
                }
            }

            messenger.sendMessage(ctx.getChatId(), "‚öôÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: " + data);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {}", data, e);
            messenger.sendMessage(ctx.getChatId(), "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: " + e.getMessage());
        }
    }

    // ====================== HANDLERS ======================
    private void showMyTasks(BotContext ctx) {
        List<TaskDto> tasks = taskService.getByAssignee(ctx.getChatId()).stream()
                .filter(x -> x.status().equals(TaskStatus.IN_PROGRESS))
                .toList();

        if (tasks.isEmpty()) {
            messenger.sendMessage(ctx.getChatId(), "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.");
            return;
        }

        String sb = "üìã *–ú–æ–∏ –∑–∞–¥–∞—á–∏:*\n\n";
        UiKeyboard keyboard = new UiKeyboard();

        for (TaskDto t : tasks) {
            keyboard.addRow(new UiButton("‚û°Ô∏è " + t.description(), CallbackFactory.PREFIX_TASK + t.id()));
        }

        messenger.sendMessageWithKeyboard(ctx.getChatId(), sb, keyboard);
    }

    private void showTaskDetails(String data, BotContext ctx) {
        Long taskId = extractTaskId(data);
        TaskDto task = taskService.getById(taskId);

        StringBuilder sb = new StringBuilder();
        sb.append("üìã *–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏*\n").append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");

        appendIfPresent(sb, "üè∑ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ", task.title());
        appendIfPresent(sb, "üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ", task.description());
        appendIfPresent(sb, "üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ", DateTimeUtils.formatRu(task.dateOfCreate()));

        sb.append("\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

        UiKeyboard keyboard = UiKeyboard.ofRows(
                UiKeyboardRow.of(
                        new UiButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", CallbackFactory.PREFIX_TASK_DONE + task.id()),
                        new UiButton("üí¨ –ö–æ–º–º–µ–Ω—Ç", CallbackFactory.PREFIX_TASK_COMMENT + task.id())),
                UiKeyboardRow.of(
                        new UiButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", CallbackFactory.PREFIX_TASK_MEDIA + task.id())));

        messenger.sendMessageWithKeyboard(ctx.getChatId(), messenger.escapeMarkdown(sb.toString()), keyboard);
    }

    private void handleTaskDone(String data, BotContext ctx) {
        Long taskId = extractTaskId(data);
        AppUser user = findUserByChat(ctx.getChatId());
        taskService.changeStatusAndAssign(taskId, TaskStatus.DONE, user);

        try {
            if (ctx.getMessageId() != null) {
                client.execute(new DeleteMessage(ctx.getChatId().toString(), ctx.getMessageId()));
            }
        } catch (TelegramApiException e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #{}: {}", taskId, e.getMessage());
        }

        messenger.sendMessage(ctx.getChatId(), "‚úÖ –ó–∞–¥–∞—á–∞ #" + taskId + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ üí™");
    }

    private void handleTakeTask(String data, BotContext ctx) {
        Long taskId = extractTaskId(data);

        try {
            if (ctx.getMessageId() != null) {
                client.execute(new DeleteMessage(groupChatId.toString(), ctx.getMessageId()));
            }
        } catch (TelegramApiException e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {}", e.getMessage());
        }
        AppUser user = findUserByChat(ctx.getChatId());
        taskService.changeStatusAndAssign(taskId, TaskStatus.IN_PROGRESS, user);

        messenger.sendMessage(ctx.getChatId(), "‚úÖ –¢—ã –≤–∑—è–ª –∑–∞–¥–∞—á—É #" + taskId + ".\n–ü–æ–≥–Ω–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å üí™");
    }

    private void handleTaskComment(String data, BotContext ctx) {
        Long taskId = extractTaskId(data);
        Long chatId = ctx.getChatId();

        messenger.sendMessage(chatId, "üí¨ –í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ #" + taskId + ":");
        inputWaiter.waitForInput(chatId, inputText -> {
            try {
                AppUser user = findUserByChat(chatId);
                TaskCommentDto comment = commentService.addComment(taskId, user, inputText);
                messenger.sendMessage(chatId, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω:\n_" + comment.text() + "_");
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", e);
                messenger.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + e.getMessage());
            }
        });
    }

    private void handleTaskMedia(String data, BotContext ctx) {
        Long taskId = extractTaskId(data);
        Long chatId = ctx.getChatId();

        messenger.sendMessage(chatId, "üì∑ –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–∏–ª–∏ –≤–∏–¥–µ–æ) –¥–ª—è –∑–∞–¥–∞—á–∏ #" + taskId + ":");

        inputWaiter.waitForMediaInput(chatId, fileIds -> {
            try {
                AppUser user = findUserByChat(chatId);
                var history = historyService.addHistory(taskId, user, TaskActionType.ATTACHMENT_ADDED);
                fileIds.forEach(fileId -> attachmentService.addAttachment(history.getId(), fileId));
                messenger.sendMessage(chatId, "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " + fileIds.size());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {}", e.getMessage(), e);
                messenger.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–¥–∏–∞: " + e.getMessage());
            }
        });
    }

    // ====================== UTILS ======================
    private Long extractTaskId(String data) {
        if (data == null || data.isBlank()) {
            throw new IllegalArgumentException("Callback –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        String[] parts = data.split(":");
        String last = parts[parts.length - 1];
        if (!last.matches("\\d+")) {
            throw new IllegalArgumentException("–í callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π ID: " + data);
        }
        return Long.parseLong(last);
    }

    private AppUser findUserByChat(Long chatId) {
        return externalIdsRepository
                .findByTelegramChatId(chatId)
                .map(UserExternalIds::getUser)
                .orElseThrow(() -> new EntityNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId –Ω–µ –Ω–∞–π–¥–µ–Ω: " + chatId));
    }

    private void appendIfPresent(StringBuilder sb, String label, String value) {
        if (value != null && !value.isBlank()) {
            sb.append('\n').append(label).append(value);
        }
    }
}
